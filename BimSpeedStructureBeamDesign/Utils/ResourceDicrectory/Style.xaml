<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:local="clr-namespace:BimSpeedStructureBeamDesign.Utils.ResourceDicrectory"
                    xmlns:converters="clr-namespace:BimSpeedStructureBeamDesign.Utils.ResourceDicrectory.Converter"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
            <ResourceDictionary Source="GroupBoxStyle2.xaml"></ResourceDictionary>
            <ResourceDictionary Source="ButtonStyle2.xaml"></ResourceDictionary>
            <ResourceDictionary Source="CheckBoxStyle.xaml"></ResourceDictionary>
            <ResourceDictionary Source="RadioButtonStyle2.xaml"></ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>
    <Style TargetType="{x:Type local:Ripple}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ClipToBounds"
          Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:RippleAssist.ClipToBounds)}" />
        <Setter Property="Feedback"
          Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:RippleAssist.Feedback)}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="RecognizesAccessKey" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Ripple}">
                    <Grid Background="Transparent " >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Normal" To="MousePressed">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ScaleTransform"
                                              Storyboard.TargetProperty="ScaleX">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ScaleTransform"
                                              Storyboard.TargetProperty="ScaleY">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ClickEllipse"
                                              Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value=".26" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="MousePressed" To="MouseOut">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ScaleTransform"
                                              Storyboard.TargetProperty="ScaleX">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ScaleTransform"
                                              Storyboard.TargetProperty="ScaleY">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ClickEllipse"
                                              Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="MousePressed" To="Normal">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ScaleTransform"
                                              Storyboard.TargetProperty="ScaleX">
                                                <EasingDoubleKeyFrame
                                                  x:Name="MousePressedToNormalScaleXKeyFrame"
                                                  KeyTime="0:0:0.30"
                                                  Value="1" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ScaleTransform"
                                              Storyboard.TargetProperty="ScaleY">
                                                <EasingDoubleKeyFrame
                                                  x:Name="MousePressedToNormalScaleYKeyFrame"
                                                  KeyTime="0:0:0.30"
                                                  Value="1" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
                                              Storyboard.TargetName="ClickEllipse"
                                              Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value=".26" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value=".26" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ScaleTransform"
                                          Storyboard.TargetProperty="ScaleX"
                                          To="0" />
                                        <DoubleAnimation Storyboard.TargetName="ScaleTransform"
                                          Storyboard.TargetProperty="ScaleY"
                                          To="0" />
                                        <DoubleAnimation Storyboard.TargetName="ClickEllipse"
                                          Storyboard.TargetProperty="Opacity"
                                          To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MousePressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ScaleTransform"
                                          Storyboard.TargetProperty="ScaleX"
                                          To="1" />
                                        <DoubleAnimation Storyboard.TargetName="ScaleTransform"
                                          Storyboard.TargetProperty="ScaleY"
                                          To="1" />
                                        <DoubleAnimation Storyboard.TargetName="ClickEllipse"
                                          Storyboard.TargetProperty="Opacity"
                                          To="0.26" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOut">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ScaleTransform"
                                          Storyboard.TargetProperty="ScaleX"
                                          To="0" />
                                        <DoubleAnimation Storyboard.TargetName="ScaleTransform"
                                          Storyboard.TargetProperty="ScaleY"
                                          To="0" />
                                        <DoubleAnimation Storyboard.TargetName="ClickEllipse"
                                          Storyboard.TargetProperty="Opacity"
                                          To="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Canvas HorizontalAlignment="Stretch"
                          VerticalAlignment="Stretch"
                          IsHitTestVisible="False">
                            <Ellipse x:Name="ClickEllipse"
                              Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleX}"
                              Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleY}"
                              Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}"
                              Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}"
                              Fill="{TemplateBinding Feedback}"
                              Opacity="0"
                              RenderTransformOrigin=".5,.5">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ScaleTransform" ScaleX="0"
                                          ScaleY="0" />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform x:Name="TranslateTransform" />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Canvas.Style>
                                <Style TargetType="Canvas">
                                    <Setter Property="ZIndex" Value="0" />
                                    <Style.Triggers>
                                        <Trigger Property="local:RippleAssist.RippleOnTop"
                                          Value="True">
                                            <Setter Property="ZIndex" Value="2" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Canvas.Style>
                        </Canvas>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          Panel.ZIndex="1"
                          Content="{TemplateBinding Content}"
                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                          ContentTemplate="{TemplateBinding ContentTemplate}"
                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                          RecognizesAccessKey="{TemplateBinding RecognizesAccessKey}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <Style TargetType="{x:Type local:ColorZone}">
        <Style.Resources>
            <converters:ShadowOpacityMaskConverter x:Key="ShadowOpacityMaskConverter" />
        </Style.Resources>
        <Setter Property="Background" Value="{Binding}" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorZone}">
                    <Grid Background="Transparent">
                        <Grid.OpacityMask>
                            <MultiBinding Converter="{StaticResource ShadowOpacityMaskConverter}">
                                <Binding Path="ActualWidth"
                              RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="ActualHeight"
                              RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="(local:ElevationAssist.Elevation)"
                              RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                        </Grid.OpacityMask>
                        <AdornerDecorator
                      CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(local:ShadowAssist.CacheMode)}">
                            <Border Background="{TemplateBinding Background}"
                          CornerRadius="{TemplateBinding CornerRadius}"
                          Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:ElevationAssist.Elevation), Converter={x:Static converters:ShadowConverter.Instance}}" />
                        </AdornerDecorator>
                        <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      ClipToBounds="{TemplateBinding ClipToBounds}"
                      CornerRadius="{TemplateBinding CornerRadius}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          Content="{TemplateBinding Content}"
                          ContentTemplate="{TemplateBinding ContentTemplate}"
                          Cursor="{TemplateBinding Cursor}"
                          RecognizesAccessKey="True"
                          TextElement.Foreground="{TemplateBinding Foreground}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="Mode" Value="Inverted">
                <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.Foreground}" />
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Background}" />
            </Trigger>
            <Trigger Property="Mode" Value="PrimaryLight">
                <Setter Property="Background"
              Value="{DynamicResource MaterialDesign.Brush.Primary.Light}" />
                <Setter Property="Foreground"
              Value="{DynamicResource MaterialDesign.Brush.Primary.Light.Foreground}" />
            </Trigger>
            <Trigger Property="Mode" Value="PrimaryMid">
                <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.Primary}" />
                <Setter Property="Foreground"
              Value="{DynamicResource MaterialDesign.Brush.Primary.Foreground}" />
            </Trigger>
            <Trigger Property="Mode" Value="PrimaryDark">
                <Setter Property="Background"
              Value="{DynamicResource MaterialDesign.Brush.Primary.Dark}" />
                <Setter Property="Foreground"
              Value="{DynamicResource MaterialDesign.Brush.Primary.Dark.Foreground}" />
            </Trigger>
            <Trigger Property="Mode" Value="SecondaryLight">
                <Setter Property="Background"
              Value="{DynamicResource MaterialDesign.Brush.Secondary.Light}" />
                <Setter Property="Foreground"
              Value="{DynamicResource MaterialDesign.Brush.Secondary.Light.Foreground}" />
            </Trigger>
            <Trigger Property="Mode" Value="SecondaryMid">
                <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.Secondary}" />
                <Setter Property="Foreground"
              Value="{DynamicResource MaterialDesign.Brush.Secondary.Foreground}" />
            </Trigger>
            <Trigger Property="Mode" Value="SecondaryDark">
                <Setter Property="Background"
              Value="{DynamicResource MaterialDesign.Brush.Secondary.Dark}" />
                <Setter Property="Foreground"
              Value="{DynamicResource MaterialDesign.Brush.Secondary.Dark.Foreground}" />
            </Trigger>
            <Trigger Property="Mode" Value="Light">
                <Setter Property="Background"
              Value="{DynamicResource MaterialDesign.Brush.ColorZone.LightBackground}" />
                <Setter Property="Foreground"
              Value="{DynamicResource MaterialDesign.Brush.ColorZone.LightForeground}" />
            </Trigger>
            <Trigger Property="Mode" Value="Dark">
                <Setter Property="Background"
              Value="{DynamicResource MaterialDesign.Brush.ColorZone.DarkBackground}" />
                <Setter Property="Foreground"
              Value="{DynamicResource MaterialDesign.Brush.ColorZone.DarkForeground}" />
            </Trigger>
            <Trigger Property="Mode" Value="Custom">
                <Setter Property="Background"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:ColorZoneAssist.Background)}" />
                <Setter Property="Foreground"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:ColorZoneAssist.Foreground)}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>